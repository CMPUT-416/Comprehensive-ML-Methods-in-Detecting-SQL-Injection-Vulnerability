import joblib
import numpy as np
from matplotlib import pyplot as plt
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score

class KMeansModel:
    '''
    1.Not using the y_train and y_test for training
    2.K-Means is Not a Classifier
    3.无监督学习不能用cv啊
    
    '''
    def __init__(self, n_clusters_range):
        self.best_model = None
        self.n_clusters_range = n_clusters_range
        self.silhouette_scores = []

    def fit(self, X):
        for n_clusters in self.n_clusters_range:
            model = KMeans(n_clusters=n_clusters)
            labels = model.fit_predict(X)
            silhouette_avg = silhouette_score(X, labels)
            self.silhouette_scores.append(silhouette_avg)

            if self.best_model is None or silhouette_avg > max(self.silhouette_scores):
                self.best_model = model

    def save_model(self, filename):
        joblib.dump(self.best_model, filename)

    def load_model(self, filename):
        self.best_model = joblib.load(filename)

    def predict(self, X):
        return self.best_model.predict(X)

    def plot_silhouette_scores(self):
        plt.figure()
        plt.plot(self.n_clusters_range, self.silhouette_scores, marker='o')
        plt.xlabel('Number of Clusters')
        plt.ylabel('Silhouette Score')
        plt.title('Silhouette Scores for Different Numbers of Clusters')
        plt.savefig("kmeans_silhouette_scores.png")
