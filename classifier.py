import sys
from tqdm import tqdm

from preprocessor import Preprocessor
from models.knn import KNNModel
from models.nb import NBModel
from models.logReg import LogRegModel
from models.svm import SVMModel
from models.decision_tree import DecisionTreeModel



class Classifier:
    def __init__(self, cv: int, preprocessor, classifiers: list, evals: tuple, MODE):
        self.preprocessor = preprocessor
        self.cv: int = cv
        self.evals: tuple = evals
        self.classifiers: list = classifiers
        self.MODE = MODE

    def classify(self):
        print("+" * 60)
        print("\t\t\t\t** MODEL LEARNING **")
        print("+" * 60 + '\n')

        print(f">> Training Settings"
              f"\n\t> Method of {self.cv}-fold Cross-validation"
              f"\n\t> Benchmarks of {self.evals}")

        print(f">> Modelling & Predictions")
        for classifier in tqdm(self.classifiers):
            print('\n')
            if self.MODE == "PRE":
                classifier.classify(self.preprocessor.datasets_train, self.preprocessor.datasets_test, False)
            else:
                classifier.classify(self.preprocessor.datasets_train, self.preprocessor.datasets_test, True)

        print('\n' + "+" * 60)
        print("\t\t\t** MODEL PREDICTION ACCOMPLISHED **")
        print("+" * 60 + '\n\n')


def main(argv):
    """ Main Func """
    # Possible cmd:
    #       python3 classifier.py [MODE:<NEW/PRE>] [SELECTION:<*/0~8>] [CV:<2~5>]
    """ Dashboard """
    MODE = "NEW"
    SELECTION = '*'
    CV = 3
    evals = ('neg_mean_squared_error', 'f1_micro', 'balanced_accuracy')
    """ Dashboard """

    try:
        if argv[2] is not None:
            MODE = argv[1]
            assert MODE == "NEW" or MODE == "PRE"
        if argv[2] is not None:
            SELECTION = argv[2]
        if argv[3] is not None:
            CV = int(argv[3])
        else:
            raise
    except:
        pass
        #sys.stderr.write("\n>> CommandError: Invalid command entered, please check the command and retry;")
        #exit()

    # Initialize new models:
    classifiers = []
    if SELECTION == '*':
        classifiers = [LogRegModel(cv=CV, cvEval=evals),
                       NBModel(cv=CV, cvEval=evals),
                       KNNModel(cv=CV, cvEval=evals),
                       SVMModel(cv=CV, cvEval=evals),
                       DecisionTreeModel(cv=CV, cvEval=evals)]
    elif SELECTION == 0:
        pass
    elif SELECTION == 1:
        classifiers.append(LogRegModel(cv=CV, cvEval=evals))
    elif SELECTION == 2:
        classifiers.append(NBModel(cv=CV, cvEval=evals))
    elif SELECTION == 3:
        classifiers.append(KNNModel(cv=CV, cvEval=evals))
    elif SELECTION == 4:
        classifiers.append(SVMModel(cv=CV, cvEval=evals))
    elif SELECTION == 5:
        classifiers.append(DecisionTreeModel(cv=CV, cvEval=evals))
    elif SELECTION == 6:
        pass
    else:
        sys.stderr.write("\n>> ModelSelectionError: Invalid model selection, valid scope is [0-6];")
        exit()

    # Apply pre-trained models if needed:
    if MODE == "PRE":
        for classifier in classifiers:
            classifier._reload()
    print(f"\n>> Execution Strategy: MODE={MODE}, SELECTION={SELECTION}, CV={CV}\n")





    """ Preprocessing """
    P = Preprocessor(dirPath="data/")
    P.process()

    """ Modelling """
    C = Classifier(cv=CV,
                   preprocessor=P,
                   classifiers=classifiers,
                   evals=evals,
                   MODE=MODE)
    C.classify()


if __name__ == '__main__':
    main(sys.argv)