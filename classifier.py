import sys
from tqdm import tqdm

from preprocessor import Preprocessor
from models.knn import KNNModel
from models.nb import NBModel
from models.logReg import LogRegModel
from models.svm import SVMModel
from models.dt import DTModel
from models.gbdt import GBDTModel



class Classifier:
    def __init__(self, cv: int, preprocessor, classifiers: list, evals: tuple):
        self.preprocessor = preprocessor
        self.cv: int = cv
        self.evals: tuple = evals
        self.classifiers: list = classifiers

    def classify(self):
        print("+" * 60)
        print("\t\t\t\t** MODEL LEARNING **")
        print("+" * 60 + '\n')

        print(f">> Training Settings"
              f"\n\t> Method of {self.cv}-fold Cross-validation"
              f"\n\t> Benchmarks of {self.evals}")

        print(f">> Modelling & Predictions")
        for classifier in tqdm(self.classifiers):
            print('\n')
            classifier.classify(self.preprocessor.datasets_train, self.preprocessor.datasets_test, doTraining=True)

        print('\n' + "+" * 60)
        print("\t\t\t** MODEL PREDICTION ACCOMPLISHED **")
        print("+" * 60 + '\n\n')


def main(argv):
    """ Main Func """
    # Possible cmd:  python3 classifier.py [CV:<2~5>]
    CV = 3
    evals = ('neg_mean_squared_error', 'f1_micro', 'balanced_accuracy')

    try:
        CV = int(argv[3])
    except:
        CV = 3
        sys.stderr.write("\n>> CommandError: Invalid command entered, please check the command and retry;")
        #exit()

    # Initialize new models:
    classifiers = [LogRegModel(cv=CV, cvEval=evals),
                   NBModel(cv=CV, cvEval=evals),
                   KNNModel(cv=CV, cvEval=evals),
                   SVMModel(cv=CV, cvEval=evals),
                   DTModel(cv=CV, cvEval=evals)]
    #classifiers = [GBDTModel(cv=CV, cvEval=evals)]

    """ Preprocessing """
    P = Preprocessor(dirPath="data/")
    P.process()

    """ Modelling """
    C = Classifier(cv=CV,
                   preprocessor=P,
                   classifiers=classifiers,
                   evals=evals)
    C.classify()


if __name__ == '__main__':
    main(sys.argv)