import sys

import nltk
from gensim.models import Doc2Vec

from models.knn import KNNModel
from models.nb import NBModel
from models.logReg import LogRegModel
from models.svm import SVMModel

class Interactor:
    def __init__(self):
        print(">> Initializing detector...")
        self.SELECT = 4
        self.HISTORY = {}
        self.detector = SVMModel(cv=3, cvEval=('neg_mean_squared_error', 'f1_micro', 'balanced_accuracy'))
        self.detector._reload()
        self.embedder = Doc2Vec.load("srcs/doc2vec.pkl")
        print(">> DONE.\n")

    def help(self):
        # 0=Baseline;
        # 1=LogisticRegression;
        # 2=Naive Bayes;
        # 3=k-nearest Neighbors;
        # 4=Support Vector Machine;
        # 5=FCN;
        # 6=RNN/LSTM
        print(">> Hi, this detector applies pre-trained models to check the SQL semantics input, you could")
        print("\t* Enter <(m)ode> to select specific ML detectors")
        print("\t* Enter <(d)etect> to check an SQL vulnerability")
        print("\t* Enter <(s)elect> to select detector")
        print("\t* Enter <(h)elp> to review the instruction page")


    def detect(self):
        print(f">> Current loaded detector: ID={self.SELECT}")
        print(">> Enter your SQL semantics to test")
        sql = input("> ")
        sql_tokens = nltk.word_tokenize(sql.strip())
        sql_vector = self.embedder.infer_vector(sql_tokens)

        outcome = self.detector.simpleDetect(sql_vector)
        print(f">> Detection result: {outcome}")
        self.HISTORY[self.SELECT] = outcome

    def select(self):
        print(f">> Current detector is {self.SELECT}")
        print(">> Enter ID to select detector:"
              "\n\t* 0=Baseline;"
              "\n\t* 1=LogisticRegression;"
              "\n\t* 2=Naive Bayes;"
              "\n\t* 3=k-nearest Neighbors;"
              "\n\t* 4=Support Vector Machine;"
              "\n\t* 5=FCN;"
              "\n\t* 6=RNN/LSTM")
        self.SELECT = input("> ")
        try:
            if self.SELECT == 0:
                pass
            elif self.SELECT == 1:
                self.detector = LogRegModel(cv=3, cvEval=('neg_mean_squared_error', 'f1_micro', 'balanced_accuracy'))
            elif self.SELECT == 2:
                self.detector = NBModel(cv=3, cvEval=('neg_mean_squared_error', 'f1_micro', 'balanced_accuracy'))
            elif self.SELECT == 3:
                self.detector = KNNModel(cv=3, cvEval=('neg_mean_squared_error', 'f1_micro', 'balanced_accuracy'))
            elif self.SELECT == 4:
                self.detector = SVMModel(cv=3, cvEval=('neg_mean_squared_error', 'f1_micro', 'balanced_accuracy'))
            elif self.SELECT == 5:
                pass
            elif self.SELECT == 6:
                pass
            else:
                raise
        except:
            sys.stderr.write("\n>> ModelSelectionError: Invalid model selection;")
            return
        self.detector._reload()
        print(">> Model reload successfully")


if __name__ == '__main__':
    agent = Interactor()
    agent.help()

    while True:
        cmd = input("> ").lower().strip()
        if cmd == "help" or cmd == "h":
            agent.help()
        elif cmd == "detect" or cmd == "d":
            agent.detect()
        elif cmd == "select" or cmd == "s":
            agent.select()






